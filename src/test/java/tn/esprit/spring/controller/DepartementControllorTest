package tn.esprit.spring.controller;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import tn.esprit.spring.entities.Departement;
import tn.esprit.spring.services.DepartementService;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class DepartementControllorTest {

    @Mock
    private DepartementService departementService;

    @InjectMocks
    private DepartementControllor departementController;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetAllDepartements() {
        Departement departement1 = new Departement();
        Departement departement2 = new Departement();
        when(departementService.findAll()).thenReturn(Arrays.asList(departement1, departement2));

        List<Departement> result = departementController.getAllDepartements();

        assertEquals(2, result.size());
        verify(departementService, times(1)).findAll();
    }

    @Test
    void testGetAllDepartements_EmptyList() {
        when(departementService.findAll()).thenReturn(Arrays.asList());

        List<Departement> result = departementController.getAllDepartements();

        assertTrue(result.isEmpty());
        verify(departementService, times(1)).findAll();
    }

    @Test
    void testGetDepartementById_Success() {
        Departement departement = new Departement();
        when(departementService.findById(1)).thenReturn(departement);

        ResponseEntity<Departement> response = departementController.getDepartementById(1);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        verify(departementService, times(1)).findById(1);
    }

    @Test
    void testGetDepartementById_NotFound() {
        when(departementService.findById(1)).thenReturn(null);

        ResponseEntity<Departement> response = departementController.getDepartementById(1);

        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
        assertNull(response.getBody());
        verify(departementService, times(1)).findById(1);
    }

    @Test
    void testCreateDepartement_Success() {
        Departement departement = new Departement();
        when(departementService.save(departement)).thenReturn(departement);

        Departement result = departementController.createDepartement(departement);

        assertNotNull(result);
        verify(departementService, times(1)).save(departement);
    }

    @Test
    void testCreateDepartement_InvalidInput() {
        Departement departement = new Departement(); // Imagine invalid data here
        when(departementService.save(departement)).thenReturn(null);

        Departement result = departementController.createDepartement(departement);

        assertNull(result);
        verify(departementService, times(1)).save(departement);
    }

    @Test
    void testUpdateDepartement_Success() {
        Departement departement = new Departement();
        when(departementService.update(departement)).thenReturn(departement);

        ResponseEntity<Departement> response = departementController.updateDepartement(1, departement);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        verify(departementService, times(1)).update(departement);
    }

    @Test
    void testUpdateDepartement_NotFound() {
        Departement departement = new Departement();
        when(departementService.update(departement)).thenReturn(null);

        ResponseEntity<Departement> response = departementController.updateDepartement(1, departement);

        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
        assertNull(response.getBody());
        verify(departementService, times(1)).update(departement);
    }

    @Test
    void testDeleteDepartement_Success() {
        doNothing().when(departementService).delete(1);

        ResponseEntity<Void> response = departementController.deleteDepartement(1);

        assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());
        verify(departementService, times(1)).delete(1);
    }

    @Test
    void testDeleteDepartement_NotFound() {
        doThrow(new IllegalArgumentException("Departement not found")).when(departementService).delete(999);

        assertThrows(IllegalArgumentException.class, () -> departementController.deleteDepartement(999));
        verify(departementService, times(1)).delete(999);
    }
}
